---input---
package example

# Rego Policy References: https://www.openpolicyagent.org/docs/latest/policy-reference/

### Constants

a := {1, 2, 3}
b := {4, 5, 6}
c := a | b

### Conditionals (Boolean)

# p is true if ...
p := true { 1 == 1 }

# OR
# with `import rego.v1` or `import future.keywords.if`
p if { 2 > 1 }

# OR
p { 3 != 4 }


### Conditionals

# with `import rego.v1` or `import future.keywords.if`
default a := 1
a := 5   if { input.value > 3 }
a := 100 if { input.value > 10 }


### Incremental

# a_set will contain values of x and values of y
a_set[x] { x := [1, 2, 3][_] }
a_set[y] { y := [4, 5, 6][_] }

# alternatively, with `import rego.v1`, or `import future.keywords.contains` and `import future.keywords.if`
a_set contains x if { x in [1, 2, 3] }
a_set contains y if { y in [4, 5, 6] }

# a_map will contain key->value pairs x->y and w->z
a_map[x] := y if { x := "key1"; y := "value1" }
a_map[w] := z if { w := "key2"; z := "value2" }


### Functions (boolean)

# with `import rego.v1` or `import future.keywords.if`
f(x, y) if {
    x < y
}

# OR

f(x, y) := true if {
    x + y > 10
}

### Functions (conditionals)

# with `import rego.v1` or `import future.keywords.if`
f(x) := "A" if { x >= 90 }
f(x) := "B" if { x >= 80; x < 90 }
f(x) := "C" if { x >= 70; x < 80 }


### Reference Heads

# with `import rego.v1`, or `import future.keywords.contains` and `import future.keywords.if`
fruit.apple.seeds = 12 if input == "apple"             # complete document (single value rule)

fruit.pineapple.colors contains x if x := "yellow"     # multi-value rule

fruit.banana.phone[x] = "bananular" if x := "cellular" # single value rule
fruit.banana.phone.cellular = "bananular" if true      # equivalent single value rule

fruit.orange.color(x) = true if x == "orange"          # function

---tokens---
'package'     Keyword
' '           Text
'example'     Name
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# Rego Policy References: https://www.openpolicyagent.org/docs/latest/policy-reference/' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'### Constants' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'a'           Name
' '           Text
':='          Operator
' '           Text
'{'           Punctuation
'1'           Literal.Number
','           Punctuation
' '           Text
'2'           Literal.Number
','           Punctuation
' '           Text
'3'           Literal.Number
'}'           Punctuation
'\n'          Text.Whitespace

'b'           Name
' '           Text
':='          Operator
' '           Text
'{'           Punctuation
'4'           Literal.Number
','           Punctuation
' '           Text
'5'           Literal.Number
','           Punctuation
' '           Text
'6'           Literal.Number
'}'           Punctuation
'\n'          Text.Whitespace

'c'           Name
' '           Text
':='          Operator
' '           Text
'a'           Name
' '           Text
'|'           Operator
' '           Text
'b'           Name
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'### Conditionals (Boolean)' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# p is true if ...' Comment.Single
'\n'          Text.Whitespace

'p'           Name
' '           Text
':='          Operator
' '           Text
'true'        Keyword
' '           Text
'{'           Punctuation
' '           Text
'1'           Literal.Number
' '           Text
'=='          Operator
' '           Text
'1'           Literal.Number
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# OR'        Comment.Single
'\n'          Text.Whitespace

'# with `import rego.v1` or `import future.keywords.if`' Comment.Single
'\n'          Text.Whitespace

'p'           Name
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'2'           Literal.Number
' '           Text
'>'           Operator
' '           Text
'1'           Literal.Number
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# OR'        Comment.Single
'\n'          Text.Whitespace

'p'           Name
' '           Text
'{'           Punctuation
' '           Text
'3'           Literal.Number
' '           Text
'!='          Operator
' '           Text
'4'           Literal.Number
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'\n'          Text.Whitespace

'### Conditionals' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# with `import rego.v1` or `import future.keywords.if`' Comment.Single
'\n'          Text.Whitespace

'default'     Keyword
' '           Text
'a'           Name
' '           Text
':='          Operator
' '           Text
'1'           Literal.Number
'\n'          Text.Whitespace

'a'           Name
' '           Text
':='          Operator
' '           Text
'5'           Literal.Number
'   '         Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'input'       Name.Builtin
'.'           Punctuation
'value'       Name
' '           Text
'>'           Operator
' '           Text
'3'           Literal.Number
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'a'           Name
' '           Text
':='          Operator
' '           Text
'100'         Literal.Number
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'input'       Name.Builtin
'.'           Punctuation
'value'       Name
' '           Text
'>'           Operator
' '           Text
'10'          Literal.Number
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'\n'          Text.Whitespace

'### Incremental' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# a_set will contain values of x and values of y' Comment.Single
'\n'          Text.Whitespace

'a_set'       Name
'['           Punctuation
'x'           Name
']'           Punctuation
' '           Text
'{'           Punctuation
' '           Text
'x'           Name
' '           Text
':='          Operator
' '           Text
'['           Punctuation
'1'           Literal.Number
','           Punctuation
' '           Text
'2'           Literal.Number
','           Punctuation
' '           Text
'3'           Literal.Number
']'           Punctuation
'['           Punctuation
'_'           Name
']'           Punctuation
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'a_set'       Name
'['           Punctuation
'y'           Name
']'           Punctuation
' '           Text
'{'           Punctuation
' '           Text
'y'           Name
' '           Text
':='          Operator
' '           Text
'['           Punctuation
'4'           Literal.Number
','           Punctuation
' '           Text
'5'           Literal.Number
','           Punctuation
' '           Text
'6'           Literal.Number
']'           Punctuation
'['           Punctuation
'_'           Name
']'           Punctuation
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# alternatively, with `import rego.v1`, or `import future.keywords.contains` and `import future.keywords.if`' Comment.Single
'\n'          Text.Whitespace

'a_set'       Name
' '           Text
'contains'    Keyword
' '           Text
'x'           Name
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'x'           Name
' '           Text
'in'          Keyword
' '           Text
'['           Punctuation
'1'           Literal.Number
','           Punctuation
' '           Text
'2'           Literal.Number
','           Punctuation
' '           Text
'3'           Literal.Number
']'           Punctuation
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'a_set'       Name
' '           Text
'contains'    Keyword
' '           Text
'y'           Name
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'y'           Name
' '           Text
'in'          Keyword
' '           Text
'['           Punctuation
'4'           Literal.Number
','           Punctuation
' '           Text
'5'           Literal.Number
','           Punctuation
' '           Text
'6'           Literal.Number
']'           Punctuation
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# a_map will contain key->value pairs x->y and w->z' Comment.Single
'\n'          Text.Whitespace

'a_map'       Name
'['           Punctuation
'x'           Name
']'           Punctuation
' '           Text
':='          Operator
' '           Text
'y'           Name
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'x'           Name
' '           Text
':='          Operator
' '           Text
'"key1"'      Literal.String.Double
';'           Punctuation
' '           Text
'y'           Name
' '           Text
':='          Operator
' '           Text
'"value1"'    Literal.String.Double
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'a_map'       Name
'['           Punctuation
'w'           Name
']'           Punctuation
' '           Text
':='          Operator
' '           Text
'z'           Name
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'w'           Name
' '           Text
':='          Operator
' '           Text
'"key2"'      Literal.String.Double
';'           Punctuation
' '           Text
'z'           Name
' '           Text
':='          Operator
' '           Text
'"value2"'    Literal.String.Double
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'\n'          Text.Whitespace

'### Functions (boolean)' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# with `import rego.v1` or `import future.keywords.if`' Comment.Single
'\n'          Text.Whitespace

'f'           Name
'('           Punctuation
'x'           Name
','           Punctuation
' '           Text
'y'           Name
')'           Punctuation
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
'\n'          Text.Whitespace

'    '        Text
'x'           Name
' '           Text
'<'           Operator
' '           Text
'y'           Name
'\n'          Text.Whitespace

'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# OR'        Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'f'           Name
'('           Punctuation
'x'           Name
','           Punctuation
' '           Text
'y'           Name
')'           Punctuation
' '           Text
':='          Operator
' '           Text
'true'        Keyword
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
'\n'          Text.Whitespace

'    '        Text
'x'           Name
' '           Text
'+'           Operator
' '           Text
'y'           Name
' '           Text
'>'           Operator
' '           Text
'10'          Literal.Number
'\n'          Text.Whitespace

'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'### Functions (conditionals)' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# with `import rego.v1` or `import future.keywords.if`' Comment.Single
'\n'          Text.Whitespace

'f'           Name
'('           Punctuation
'x'           Name
')'           Punctuation
' '           Text
':='          Operator
' '           Text
'"A"'         Literal.String.Double
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'x'           Name
' '           Text
'>='          Operator
' '           Text
'90'          Literal.Number
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'f'           Name
'('           Punctuation
'x'           Name
')'           Punctuation
' '           Text
':='          Operator
' '           Text
'"B"'         Literal.String.Double
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'x'           Name
' '           Text
'>='          Operator
' '           Text
'80'          Literal.Number
';'           Punctuation
' '           Text
'x'           Name
' '           Text
'<'           Operator
' '           Text
'90'          Literal.Number
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'f'           Name
'('           Punctuation
'x'           Name
')'           Punctuation
' '           Text
':='          Operator
' '           Text
'"C"'         Literal.String.Double
' '           Text
'if'          Keyword
' '           Text
'{'           Punctuation
' '           Text
'x'           Name
' '           Text
'>='          Operator
' '           Text
'70'          Literal.Number
';'           Punctuation
' '           Text
'x'           Name
' '           Text
'<'           Operator
' '           Text
'80'          Literal.Number
' '           Text
'}'           Punctuation
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'\n'          Text.Whitespace

'### Reference Heads' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'# with `import rego.v1`, or `import future.keywords.contains` and `import future.keywords.if`' Comment.Single
'\n'          Text.Whitespace

'fruit'       Name
'.'           Punctuation
'apple'       Name
'.'           Punctuation
'seeds'       Name
' '           Text
'='           Operator
' '           Text
'12'          Literal.Number
' '           Text
'if'          Keyword
' '           Text
'input'       Name.Builtin
' '           Text
'=='          Operator
' '           Text
'"apple"'     Literal.String.Double
'             ' Text
'# complete document (single value rule)' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'fruit'       Name
'.'           Punctuation
'pineapple'   Name
'.'           Punctuation
'colors'      Name
' '           Text
'contains'    Keyword
' '           Text
'x'           Name
' '           Text
'if'          Keyword
' '           Text
'x'           Name
' '           Text
':='          Operator
' '           Text
'"yellow"'    Literal.String.Double
'     '       Text
'# multi-value rule' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'fruit'       Name
'.'           Punctuation
'banana'      Name
'.'           Punctuation
'phone'       Name
'['           Punctuation
'x'           Name
']'           Punctuation
' '           Text
'='           Operator
' '           Text
'"bananular"' Literal.String.Double
' '           Text
'if'          Keyword
' '           Text
'x'           Name
' '           Text
':='          Operator
' '           Text
'"cellular"'  Literal.String.Double
' '           Text
'# single value rule' Comment.Single
'\n'          Text.Whitespace

'fruit'       Name
'.'           Punctuation
'banana'      Name
'.'           Punctuation
'phone'       Name
'.'           Punctuation
'cellular'    Name
' '           Text
'='           Operator
' '           Text
'"bananular"' Literal.String.Double
' '           Text
'if'          Keyword
' '           Text
'true'        Keyword
'      '      Text
'# equivalent single value rule' Comment.Single
'\n'          Text.Whitespace

'\n'          Text.Whitespace

'fruit'       Name
'.'           Punctuation
'orange'      Name
'.'           Punctuation
'color'       Name
'('           Punctuation
'x'           Name
')'           Punctuation
' '           Text
'='           Operator
' '           Text
'true'        Keyword
' '           Text
'if'          Keyword
' '           Text
'x'           Name
' '           Text
'=='          Operator
' '           Text
'"orange"'    Literal.String.Double
'          '  Text
'# function'  Comment.Single
'\n'          Text.Whitespace
